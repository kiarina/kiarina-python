#!/usr/bin/env bash
#MISE description="Update CHANGELOG.md files for all packages with version entry"
#USAGE arg "<version>" help="Version to add (e.g. '1.1.1')"

set -euo pipefail

version="$usage_version"

# Validate version format (basic semver check)
if ! [[ "$version" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
    echo "‚ùå Invalid version format: $version"
    echo "   Expected format: X.Y.Z or X.Y.Z-suffix (e.g., 1.1.1, 1.2.0-alpha.1)"
    exit 1
fi

echo "üìù Updating CHANGELOG.md files for version $version..."

# Get current date in YYYY-MM-DD format
current_date=$(date +%Y-%m-%d)

updated_files=()
skipped_files=()
failed_files=()

# Function to update a single CHANGELOG.md file
update_changelog() {
    local changelog_file="$1"
    local display_name="$2"
    
    if [ ! -f "$changelog_file" ]; then
        echo "  ‚ùå $display_name (CHANGELOG.md not found)"
        failed_files+=("$display_name")
        return 1
    fi
    
    # Check if version entry already exists
    if grep -q "^## \[$version\]" "$changelog_file"; then
        echo "  ‚è≠Ô∏è  $display_name (version $version already exists)"
        skipped_files+=("$display_name")
        return 0
    fi
    
    # Check if Unreleased section exists
    if ! grep -q "^## \[Unreleased\]" "$changelog_file"; then
        echo "  ‚ö†Ô∏è  $display_name (no Unreleased section found, skipping)"
        skipped_files+=("$display_name")
        return 0
    fi
    
    # Create temporary file for the updated changelog
    local temp_file=$(mktemp)
    
    # Process the changelog with awk
    awk -v version="$version" -v date="$current_date" '
    BEGIN { 
        in_unreleased = 0
        unreleased_lines[0] = ""
        unreleased_count = 0
        found_unreleased = 0
        processed = 0
    }
    
    # Found Unreleased section
    /^## \[Unreleased\]/ {
        found_unreleased = 1
        in_unreleased = 1
        next
    }
    
    # Found next version section while in unreleased
    /^## \[/ && in_unreleased {
        in_unreleased = 0
        processed = 1
        
        # Add new Unreleased section
        print "## [Unreleased]"
        print ""
        
        # Check if we have meaningful content
        has_content = 0
        for (i = 0; i < unreleased_count; i++) {
            if (unreleased_lines[i] !~ /^[[:space:]]*$/) {
                has_content = 1
                break
            }
        }
        
        if (has_content) {
            # Has content - convert Unreleased to version
            print "## [" version "] - " date
            for (i = 0; i < unreleased_count; i++) {
                print unreleased_lines[i]
            }
        } else {
            # No content - add "No changes"
            print "## [" version "] - " date
            print ""
            print "### Changed"
            print "- No changes"
            print ""
        }
        
        # Print current line (next version section)
        print
        next
    }
    
    # Collect content in unreleased section
    in_unreleased {
        unreleased_lines[unreleased_count++] = $0
        next
    }
    
    # Handle case where Unreleased is the last section
    END {
        if (found_unreleased && !processed) {
            # Add new Unreleased section
            print "## [Unreleased]"
            print ""
            
            # Check if we have meaningful content
            has_content = 0
            for (i = 0; i < unreleased_count; i++) {
                if (unreleased_lines[i] !~ /^[[:space:]]*$/) {
                    has_content = 1
                    break
                }
            }
            
            if (has_content) {
                # Has content - convert Unreleased to version
                print "## [" version "] - " date
                for (i = 0; i < unreleased_count; i++) {
                    print unreleased_lines[i]
                }
            } else {
                # No content - add "No changes"
                print "## [" version "] - " date
                print ""
                print "### Changed"
                print "- No changes"
            }
        }
    }
    
    # Print all other lines
    !in_unreleased && !/^## \[Unreleased\]/ {
        print
    }
    ' "$changelog_file" > "$temp_file"
    
    # Replace the original file
    if mv "$temp_file" "$changelog_file"; then
        echo "  ‚úÖ $display_name"
        updated_files+=("$display_name")
        return 0
    else
        echo "  ‚ùå $display_name (failed to update file)"
        failed_files+=("$display_name")
        rm -f "$temp_file"
        return 1
    fi
}

# Update root CHANGELOG.md first
echo ""
echo "üìÑ Updating root CHANGELOG.md..."
update_changelog "CHANGELOG.md" "root"

# Update package CHANGELOGs
echo ""
echo "üì¶ Updating package CHANGELOG.md files..."
while IFS= read -r package; do
    update_changelog "packages/$package/CHANGELOG.md" "$package"
done < <(mise run get-packages --all)

echo ""
echo "üìä Summary:"
echo "  üéØ Target version: $version"
echo "  üìÖ Date: $current_date"
echo "  ‚úÖ Updated files: ${#updated_files[@]}"
if [ ${#updated_files[@]} -gt 0 ]; then
    printf "     - %s\n" "${updated_files[@]}"
fi

if [ ${#skipped_files[@]} -gt 0 ]; then
    echo "  ‚è≠Ô∏è  Skipped files: ${#skipped_files[@]} (already have version entry or no Unreleased section)"
    printf "     - %s\n" "${skipped_files[@]}"
fi

if [ ${#failed_files[@]} -gt 0 ]; then
    echo "  ‚ùå Failed files: ${#failed_files[@]}"
    printf "     - %s\n" "${failed_files[@]}"
    exit 1
fi

echo ""
echo "üí° Next steps:"
echo "   1. Review changes: git diff"
echo "   2. Edit specific CHANGELOGs if they have actual changes"
echo "   3. Test the changes: mise run ci"
echo "   4. Commit: git add . && git commit -m 'docs: update CHANGELOG.md for v$version'"

echo ""
echo "‚úÖ CHANGELOG update completed!"
